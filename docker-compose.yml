version: "3.8"

services:
  reverse-proxy:
    image: traefik:2.3.2
    networks:
      - traefik-public
      - default
    command:
      # Enable docker
      - --providers.docker
      # Activate swarm mode
      - --providers.docker.swarmMode=true
      # A constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=${EMAIL?Variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    volumes:
      # To gain traefik access to docker API
      - /var/run/docker.sock:/var/run/docker.sock
      # To store certificates
      - ecommerce-analyzer-certificates:/certificates
    ports:
      # For http
      - 80:80
      # For https
      - 443:443
    deploy:
      placement:
        constraints:
          # Should run only on manager node, that should also store certificates
          - node.role == manager
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
        # https-redirect middleware to redirect HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # Create router ecommerce-analyzer-reverse-proxy-http using HTTP
        - traefik.http.routers.ecommerce-analyzer-reverse-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.ecommerce-analyzer-reverse-proxt-http.entrypoints=http
        - traefik.http.routers.ecommerce-analyzer-reverse-proxy-http.middlewares=https-redirect
        # Create router ecommerce-analyzer-reverse-proxy-https using HTTPS
        - traefik.http.routers.ecommerce-analyzer-reverse-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.ecommerce-analyzer-reverse-proxt-https.entrypoints=https
        - traefik.http.routers.ecommerce-analyzer-reverse-proxy-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.ecommerce-analyzer-reverse-proxy-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.ecommerce-analyzer-reverse-proxy-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.ecommerce-analyzer-reverse-proxy.loadbalancer.server.port=80

  db:
    restart: always
    image: postgres:12
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 5s
      timeout: 3s
    command: postgres -c 'max_connections=200'
    volumes:
      - ecommerce-analyzer-db:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    env_file:
      - env/.env
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.ecommerce-analyzer.db-data == true

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - db
    networks:
      - traefik-public
      - default
    env_file:
      - env/.env
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.ecommerce-analyzer-pgadmin-http.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
      - traefik.http.routers.ecommerce-analyzer-pgadmin-http.entrypoints=http
      - traefik.http.routers.ecommerce-analyzer-pgadmin-http.middlewares=https-redirect
      - traefik.http.routers.ecommerce-analyzer-pgadmin-https.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
      - traefik.http.routers.ecommerce-analyzer-pgadmin-https.entrypoints=https
      - traefik.http.routers.ecommerce-analyzer-pgadmin-https.tls=true
      - traefik.http.routers.ecommerce-analyzer-pgadmin-https.tls.certresolver=le
      - traefik.http.services.ecommerce-analyzer-pgadmin.loadbalancer.server.port=5050

  analyzer:
    restart: always
    image: theprodigy/ecommerce-analyzer:${TAG-latest}
    depends_on:
      - db
    build:
      context: .
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthcheck"]
      interval: 20s
      timeout: 5s
    env_file:
      - env/.env
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=traefik-public
        - traefik.http.routers.ecommerce-analyzer-http.rule=PathPrefix(`/`)
        - traefik.http.services.ecommerce-analyzer.loadbalancer.server.port=80


networks:
  traefik-public:
    driver: overlay
    external: true

volumes:
  ecommerce-analyzer-db:
  ecommerce-analyzer-certificates:
